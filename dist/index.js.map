{"version":3,"file":"index.js","mappings":";;UAAA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;;;ACfe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;ACZe;AACf;AACA;AACA;AACA;;ACJA,wBAAwB,2BAA2B,2EAA2E,kCAAkC,wBAAwB,OAAO,kCAAkC,mIAAmI;;AAE3S;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,yDAAyD;;AAEzD;AACA;AACA;AACA,IAAI;AACJ;AACA,IAAI;AACJ;AACA;AACA,0OAA0O;;AAE1O;AACA;;AAEA;AACA;AACA;;ACrDmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB,cAAc,SAAS;AACvB;AACA;AACA;;AC5BmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,QAAQ;AACnB,aAAa,MAAM;AACnB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB,eAAe,SAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;ACtCwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,eAAe;AAC5B,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB;AACA;AACA;;;;ACzBqD;AACT;;AAE5C;AACA;AACA,IAAI,YAAQ;AACZ;;AAEA;AACA;AACA;AACA;AACA,0DAA0D,SAAS,SAAS,MAAM,SAAS,QAAQ;AACnG,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS,QAAQ;;AAEjB,kBAAkB,OAAO;AACzB,WAAW,OAAO;AAClB;AACA;AACA,oCAAoC,QAAQ;AAC5C;AACA;AACA;AACA,wBAAwB,MAAM;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,kBAAkB,iBAAiB;AACnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,YAAQ;AACZ,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAQ;AACtC;AACA;AACA,GAAG;;AAEH;AACA,kBAAkB,uBAAU;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAQ;AAC3B,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,YAAQ;AAC3B,GAAG;AACH;;AAEe;AACf;AACA;AACA;;;ACvKqB;AACY;AACjC,IAAI","sources":["webpack://weather-app/webpack/bootstrap","webpack://weather-app/webpack/runtime/global","webpack://weather-app/webpack/runtime/publicPath","webpack://weather-app/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://weather-app/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://weather-app/./node_modules/date-fns/esm/toDate/index.js","webpack://weather-app/./node_modules/date-fns/esm/setHours/index.js","webpack://weather-app/./node_modules/date-fns/esm/addDays/index.js","webpack://weather-app/./node_modules/date-fns/esm/getDay/index.js","webpack://weather-app/./src/modules/app.js","webpack://weather-app/./src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || _typeof(argument) === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name setHours\n * @category Hour Helpers\n * @summary Set the hours to the given date.\n *\n * @description\n * Set the hours to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} hours - the hours of the new date\n * @returns {Date} the new date with the hours set\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Set 4 hours to 1 September 2014 11:30:00:\n * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)\n * //=> Mon Sep 01 2014 04:30:00\n */\n\nexport default function setHours(dirtyDate, dirtyHours) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var hours = toInteger(dirtyHours);\n  date.setHours(hours);\n  return date;\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of days to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} - the new date with the days added\n * @throws {TypeError} - 2 arguments required\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\n\nexport default function addDays(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 days, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  date.setDate(date.getDate() + amount);\n  return date;\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name getDay\n * @category Weekday Helpers\n * @summary Get the day of the week of the given date.\n *\n * @description\n * Get the day of the week of the given date.\n *\n * @param {Date|Number} date - the given date\n * @returns {0|1|2|3|4|5|6} the day of week, 0 represents Sunday\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Which day of the week is 29 February 2012?\n * const result = getDay(new Date(2012, 1, 29))\n * //=> 3\n */\n\nexport default function getDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var day = date.getDay();\n  return day;\n}","import { addDays, getDay, setHours } from 'date-fns';\nimport searchIcon from '../img/magnify.png';\n\nconst API_KEY = '649f476528e8be8ecbf48bc1d874c839';\nlet forecastData;\nlet location = 'Seoul';\nlet units = 'standard';\n\nasync function updateData(location, units) {\n  const loading = document.querySelector('.loading');\n  loading.classList.remove('hidden');\n  const forecastResp = await fetch(\n    `https://api.openweathermap.org/data/2.5/forecast?q=${location}&units=${units}&appid=${API_KEY}`,\n    { mode: 'cors' }\n  );\n  loading.classList.add('hidden');\n  const forecastJson = await forecastResp.json();\n  if (forecastJson.cod !== '200') throw 'Invalid city';\n  forecastData = forecastJson;\n}\n\nfunction loadWeather() {\n  const weather = document.querySelector('.weather');\n  const icon = weather.querySelector('img');\n  const humid = weather.querySelector('.weather-humid');\n  const rain = weather.querySelector('.weather-rain');\n  const weatherData = forecastData.list[0];\n  icon.src =\n    'https://openweathermap.org/img/wn/' +\n    weatherData.weather[0].icon +\n    '@4x.png';\n  humid.textContent = 'humidity: ' + weatherData.main.humidity + '%';\n  rain.textContent = 'chance of rain: ' + weatherData.pop * 100 + '%';\n\n  const temperature = document.querySelector('.temperature');\n  const name = temperature.querySelector('.name');\n  const temp = temperature.querySelector('.temp');\n  const lowHigh = temperature.querySelector('.low-high');\n\n  name.textContent = forecastData.city.name;\n  temp.textContent = weatherData.main.temp + '°';\n  lowHigh.textContent =\n    'L: ' +\n    weatherData.main.temp_min +\n    '° H: ' +\n    weatherData.main.temp_max +\n    '°';\n}\n\nfunction loadForecast() {\n  const days = document.querySelectorAll('.day');\n  const dayList = forecastData.list;\n  const dayData = [];\n\n  let time = dayList[0].dt * 1000;\n  time = setHours(time, 12);\n\n  for (let i = 0; i < 5; ++i) {\n    time = addDays(time, 1);\n    let k = 0,\n      n = dayList.length;\n    for (let b = Math.floor(n / 2); b >= 1; b = Math.floor(b / 2)) {\n      while (k + b < n && dayList[k + b].dt * 1000 <= time) k += b;\n    }\n    dayData.push({\n      day: getDayOfWeek(getDay(time)),\n      temp: dayList[k].main.temp,\n      low: dayList[k].main.temp_min,\n      high: dayList[k].main.temp_max,\n      icon:\n        'https://openweathermap.org/img/wn/' +\n        dayList[k].weather[0].icon +\n        '@4x.png',\n      humid: dayList[k].main.humidity,\n      rain: dayList[k].pop,\n    });\n  }\n\n  for (let i = 0; i < days.length; ++i) {\n    const name = days[i].querySelector('.day-name');\n    const temp = days[i].querySelector('.day-temp');\n    const lh = days[i].querySelector('.day-lh');\n    const icon = days[i].querySelector('img');\n    const humid = days[i].querySelector('.day-humid');\n    const rain = days[i].querySelector('.day-rain');\n\n    name.textContent = dayData[i].day;\n    temp.textContent = dayData[i].temp + '°';\n    lh.textContent =\n      'L: ' + dayData[i].low + '° H: ' + dayData[i].high + '°';\n    icon.src = dayData[i].icon;\n    humid.textContent = 'humidity: ' + dayData[i].humid + '%';\n    rain.textContent =\n      'chance of rain: ' + dayData[i].rain * 100 + '%';\n  }\n}\n\nfunction getDayOfWeek(num) {\n  switch (num) {\n    case 0:\n      return 'Sun';\n    case 1:\n      return 'Mon';\n    case 2:\n      return 'Tues';\n    case 3:\n      return 'Thurs';\n    case 4:\n      return 'Fri';\n    case 5:\n      return 'Sat';\n    default:\n      console.error('no such day exists');\n  }\n}\n\nasync function updateLocation(\n  newLocation = 'Seoul',\n  units = 'standard'\n) {\n  try {\n    await updateData(newLocation, units);\n    location = newLocation;\n  } catch (err) {\n    console.error(err);\n    return;\n  }\n  loadWeather();\n  loadForecast();\n}\n\nfunction initUI() {\n  const search = document.querySelector('.search');\n  const searchInput = search.querySelector('input');\n  const searchBtn = search.querySelector('button');\n  searchBtn.addEventListener('click', () => {\n    if (searchInput.value === location || searchInput.value === '')\n      return;\n    updateLocation(searchInput.value, units);\n  });\n\n  const searchImg = searchBtn.querySelector('img');\n  searchImg.src = searchIcon;\n\n  const convert = document.querySelector('.temp-convert');\n  const celcius = convert.querySelector('.celcius');\n  celcius.addEventListener('click', () => {\n    if (celcius.classList.contains('active')) return;\n    celcius.classList.add('active');\n    fahrenheit.classList.remove('active');\n    units = 'metric';\n    updateLocation(location, units);\n  });\n\n  const fahrenheit = convert.querySelector('.fahrenheit');\n  fahrenheit.addEventListener('click', () => {\n    if (fahrenheit.classList.contains('active')) return;\n    fahrenheit.classList.add('active');\n    celcius.classList.remove('active');\n    units = 'standard';\n    updateLocation(location, 'units');\n  });\n}\n\nexport default function init() {\n  initUI();\n  updateLocation();\n}\n","import './style.css';\nimport init from './modules/app';\ninit();\n"],"names":[],"sourceRoot":""}